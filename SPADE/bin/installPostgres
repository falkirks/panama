#!/bin/bash

# Stop script on error. Otherwise the script continues and echos success
# messages, even if not successful.
set -e

case $- in
*i*)    # interactive shell
;;
*)      # non-interactive shell
  CONFIRM_INSTALL="-y"
;;
esac

declare -A vars=( )                  # refresh variables for each line
while read  words; do                # iterate over lines of input
  set -- "${words[@]}"                 # update positional parameters
  for word; do
    if [[ $word = *"="* ]]; then       # if a word contains an "="...
       vars[${word%%[[:space:]]=*}]=${word#*=[[:space:]]}    # ...then set it as an associative-array key
    fi
  done
#  echo "${vars[Var]} $5"              # Here, we use content read from that line.

done <cfg/spade.storage.PostgreSQL.config
#for k in "${!vars[@]}";
#do
#  echo "$k: ${vars[$k]}"
#done

# PostgreSQL installation

OS_NAME=$(uname)
if [ "$OS_NAME" = "Linux" ]
then
  if command -v lsb_release >/dev/null 2>&1; then
    DIST_NAME=$(lsb_release -is)
  fi
  makeUserDB(){
    local createCMD="CREATE ROLE ${vars[databaseUsername]} SUPERUSER LOGIN PASSWORD '${vars[databasePassword]}';"
    local skipIfExists="EXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;"
    # psql tries to change directory to current working dir, which user
    # postgres doesn't always have permission to do.
    pushd $TMPDIR/
    sudo -u postgres psql -c "DO \$\$
    BEGIN
    $createCMD
    $skipIfExists
    END
    \$\$;"
    popd
    echo "*:*:*:${vars[databaseUsername]}:${vars[databasePassword]}" > $HOME/.pgpass
    chmod 0600 $HOME/.pgpass
    echo "Successfully created superuser '${vars[databaseUsername]}'"
  }
  if [ "$DIST_NAME" = "Ubuntu" ]
  then
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    sudo apt-get "$CONFIRM_INSTALL" install wget ca-certificates
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get "$CONFIRM_INSTALL" install postgresql-9.5
    echo "Installed PostgreSQL 9.5"
    makeUserDB
    sudo sed -i -e '1ilocal   all  '"${vars[databaseUsername]}"'   trust\'  /etc/postgresql/9.5/main/pg_hba.conf
    sudo service postgresql restart
  else
    # Sets VERSION_ID to fedora version major num.
    eval "$(cat /etc/os-release  | grep VERSION_ID)"
    sudo dnf install "$CONFIRM_INSTALL" https://download.postgresql.org/pub/repos/yum/9.5/fedora/fedora-${VERSION_ID}-x86_64/pgdg-fedora-repo-latest.noarch.rpm
    sudo dnf install "$CONFIRM_INSTALL" postgresql95 postgresql95-server
    echo "Installed PostgreSQL 9.5"
    # If the data directory already exists, initdb returns an error code.
    # This would halt the script, so we check if it has already been created.
    pg_data_dir="/var/lib/pgsql/9.5/data"
    if sudo [ ! -d "$pg_data_dir" ]; then
      echo "PostgreSQL data directory '$pg_data_dir' does not exist. Initialising default db..."
      sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb
    else
      echo "PostgreSQL data directory '$pg_data_dir' already exists. Skipped default db initialisation"
    fi
    sudo systemctl enable postgresql-9.5
    sudo systemctl start postgresql-9.5
    makeUserDB
    # Added to the start of the file, so end up in reverse order.
    sudo sed -i -e '1ihost   all  '"${vars[databaseUsername]}"'   localhost   trust\'  /var/lib/pgsql/9.5/data/pg_hba.conf
    sudo sed -i -e '1ilocal   all  '"${vars[databaseUsername]}"'   trust\'  /var/lib/pgsql/9.5/data/pg_hba.conf
    sudo systemctl restart postgresql-9.5
  fi
  sudo createdb ${vars[database]} --owner=${vars[databaseUsername]} --username=${vars[databaseUsername]}
  echo "Successfully created database '${vars[database]}' for user '${vars[databaseUsername]}'"
elif [ "$OS_NAME" = "Darwin" ]
then
  brew install "$CONFIRM_INSTALL" postgresql@9.5
  pg_ctl -D /usr/local/var/postgres start && brew services start postgresql
  createuser ${vars[databaseUser]} --createdb --no-password
  echo "*:*:*:${vars[databaseUser]}:${vars[databasePassword]}" > $HOME/.pgpass
  chmod 0600 $HOME/.pgpass
  createdb ${vars[databaseName]} --no-password --owner=${vars[databaseUser]} --username=${vars[databaseUser]}
fi

