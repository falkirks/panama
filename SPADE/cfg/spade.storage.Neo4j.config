# Neo4j database version: Community (4.1.1)

###
# Must conform to 'dbms.directories.data' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.directories.data
# If the values of keys 'dbms.directories.neo4j_home' and 'dbms.default_database' (below) have not been modified then the database would be created at path: 
# 	'lib/neo4j-community-4.1.1/<database>/databases/neo4j'
###
database = spade.graph

# To create a database at a different path, change the value of key 'database' only and the database would be created at path: 'lib/neo4j-community-4.1.1/<database>/databases/neo4j'

###
### MODIFY THE CONFIGURATION BELOW IF YOU KNOW WHAT YOU ARE DOING!
###

###### A) SCREEN MANAGEMENT (not done by storage) ######

###
# Configuration for screen for vertices and edges being put into the storage
###
#screen=Deduplicate vertex.bloomFilter.path=db/neo4j.spade.graph.vertices.state edge.bloomFilter.path=db/neo4j.spade.graph.edges.state
screen=Deduplicate

###### B) STORAGE SETUP MANAGEMENT ######

###
# Root path of the database. Resolved according to current working directory (i.e. SPADE HOME) if not absolute.
# Must conform to 'dbms.directories.neo4j_home' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.directories.neo4j_home
# Cannot be modified for Neo4j Community edition when using the browser.
###
dbms.directories.neo4j_home = lib/neo4j-community-4.1.1

###
# Must conform to 'dbms.default_database' defined here: https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.default_database
# Cannot be modified for Neo4j Community edition with Java API.
###
dbms.default_database = neo4j

###
# Current Neo4j version Database path construction convention: '<dbms.directories.neo4j_home>/<database>/databases/<dbms.default_database>'
###

###
# Path to the configuration file for Neo4j database tuning.
# Must exist.
###
neo4jConfigFilePath = cfg/neo4j.properties

###### C) CACHE MANAGEMENT ######

###
# The type of vertex cache to keep.
# 1) id = Only keep the vertex ids
# 2) node = Keep the full vertex
###
vertexCacheMode=node

###
# The approach (by cache) to find the edge in db
# 1) none = Dont try finding in the db (duplicate edges allowed)
# 2) iterate = Iterate all the relationships (slow)
# 3) cypher = Use cypher query (even slower)
###
edgeCacheFindMode=none

###### D) STORAGE BUFFER/TRANSACTION MANAGEMENT ######

###
# The number of tasks to buffer before committing them to the database.
# Must be a non-negative number.
# Set to '0' to commit after every task.
# More memory required if the number is larger
###
flushBufferSize = 25000

###
# The number of seconds after which the tasks must be committed to the database (if the task buffer never fills up)
# Must be a non-negative number.
###
flushAfterSeconds = 60

###
# Do not fill the internal task buffer more than this number. Set to a negative number to NOT put any limit on the buffer.
###
bufferLimit = 100000

###
# Maximum number of seconds to wait for an execution inside a transaction. Set to non-positive to not have any limit.
###
transactionTimeoutInSeconds = 300

###### E) STORAGE AND DATABASE INTERACTION MANAGEMENT ######

###
# Shutdown even if there is data that is not flushed. Data in buffer discarded
###
forceShutdown = false

###
# Whether to delete the database or not before starting
###
reset=false

###
# Number of times to retry continuing in case of errors. Storage shuts down if the value exceeds.
# Must be a non-negative number.
# Set to '0' to stop at the first error.
###
maxRetries = 10

###
# Number of seconds to wait for index to get built. [UNUSED].
# Must be a non-negative number.
###
waitForIndexSeconds = 10

###
# What to do if an annotation key matches the value of 'hashPropertyKey' or 'edgeSymbolsPropertyKey'.
# Allowed values:
# 1) discard = discard the offending vertex or edge and continue
# 2) remove = remove only the offending annotation key and value from vertex or edge and continue
# Turn on 'debug' to log whenever any of the above action occurs.
###
hashKeyCollisionAction = discard

###### F) DATABASE SCHEMA MANAGEMENT ######

###
# Reserved property key name to store the hash of vertices and edges with in the database.
# Must be a non-blank string and should not collide with any annotation key in either vertices or edges.
###
hashPropertyName = hash

###
# Reserved property key name to store the querying metadata of edges with in the database.
# Must be a non-blank string and should not collide with any annotation key in edges.
###
edgeSymbolsPropertyName = spade_edge_symbols

###
# Name of the primary label on vertices (case sensitive)
# Must be a non-blank string.
###
nodePrimaryLabel = VERTEX

###
# Name of the relationship type on edges (case sensitive)
# Must be a non-blank string.
###
edgeRelationshipType = EDGE

###
# Name of the label on query state vertex (case sensitive)
# Must be a non-blank string.
###
querySymbolsNodeLabel = spade_query_symbols

###### G) DATABASE INDEXING ######

###
# Indexing options. Allowed values:
# 1) all = index all annotations as they are seen
# 2) none = No indexing
###
index.vertex = all
index.edge = all

### Testing (unused)
indexNamePrefix=spade_index_

###### H) LOGGING MANAGEMENT ######

###
# Number of seconds to wait before reporting storage stats.
# Must be a number. 
# If the value is not a positive number then no reporting is done.
###
reportingIntervalSeconds=120

###
# Whether to print debugging information or not. Useful for detailed errors in the SPADE log.
# Must be a boolean.
###
debug = false

###
# Whether to monitor time for various internal functions and report them at shutdown or not
###
timeMe=true

###### I) THREAD MANAGEMENT - RESPONSIVITY ######

###
# Number of milliseconds to sleep for between task executions. 
# Must be a positive number.
###
sleepWaitMillis = 10

###
# Milliseconds to sleep for between executing tasks
# Must be non-negative
###
mainThreadSleepWaitMillis=0

###### J) TEST MANAGEMENT ######

###
# ONLY FOR TESTING
###
test=false
test.vertex.total=0
test.edge.degree=0
test.vertex.annotations=vk_0:vv_0_${id}
test.edge.annotations=ek_0:ev_0_${id}
